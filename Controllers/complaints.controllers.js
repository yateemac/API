const mssql = require('mssql');

exports.func1 = (req, res) => 
{
    // Validate request
    console.log(`Fetching RESPONSE`);
    // create Request object
    var request = new mssql.Request();
    // query to the database and get the records
    const queryStr = `SELECT CONVERT(DATE,CALLTIME) CALLDATE, CL.*, SCH.SCHEDULE_ID, SCH.SCHEDULE_NO, SCH.SCHEDULE_TYPE_CD, SCH.SCHEDULE_TYPE, SCH.ASSIGNED_TO SCHEDULE_ASSIGNED_TO, SCH.ASSIGNED_TO_NAME SCHEDULE_ASSIGNED_TO_NAME,
    SCH.START_DATE SCHEDULE_START_DATE, SCH.END_DATE SCHEDULE_END_DATE, SCH.STATUS SCHEDULE_STATUS, SCH.ESTIMATED_HOURS SCHEDULE_ESTIMATED_HOURS, SCH.COMPLETED SCHEDULE_COMPLETED,
    SCH.ACTUAL_HOURS SCHEDULE_ACTUAL_HOURS, SCH.SUBJECT SCHEDULE_SUBJECT, SCH.INSTRUCTIONS SCHEDULE_INSTRUCTIONS, SCH.REMARKS SCHEDULE_REMARKS,
    SCH.CONTACT_PERSON SCHEDULE_CONTACT_PERSON, SCH.PREMISES SCHEDULE_PREMISES, SCH.JOB_CARD_NO SCHEDULE_JOB_CARD_NO, SCH.JOB_CARD_DATE SCHEDULE_JOB_CARD_DATE,
    SCH.JOB_CARD_NET_AMT SCHEDULE_JOB_CARD_NET_AMT, SCH.REFNO SCHEDULE_REFNO, SCH.REFNO_1 SCHEDULE_REFNO_1, SCH.REFNO_2 SCHEDULE_REFNO_2, SCH.AGR_NO SCHEDULE_AGR_NO,
    SCH.SONO SCHEDULE_SONO, SCH.JOB_NO SCHEDULE_JOB_NO, SCH.CUST_NAME SCHEDULE_CUST_NAME, SCH.ADD1 SCHEDULE_ADD1, SCH.ADD2 SCHEDULE_ADD2, SCH.ADD3 SCHEDULE_ADD3,
    SCH.PHONE1 SCHEDULE_PHONE1, SCH.PARTY_ID SCHEDULE_PARTY_ID, SCH.PARTY_NAME SCHEDULE_PARTY_NAME, SCH.PARTY_ADD1 SCHEDULE_PARTY_ADD1, SCH.PARTY_ADD2 SCHEDULE_PARTY_ADD2,
    SCH.PARTY_ADD3 SCHEDULE_PARTY_ADD3, SCH.PARTY_PHONE1 SCHEDULE_PARTY_PHONE1, SCH.PARTY_PHONE2 SCHEDULE_PARTY_PHONE2, SCH.PARTY_FAX1 SCHEDULE_PARTY_FAX1, SCH.PARTY_FAX2 SCHEDULE_PARTY_FAX2,
    SCH.PARTY_REFNO SCHEDULE_PARTY_REFNO, SCH.PARTY_MOBILE SCHEDULE_PARTY_MOBILE, SCH.PARTY_EMAIL SCHEDULE_PARTY_EMAIL, SCH.PARTY_CONTACT SCHEDULE_PARTY_CONTACT,
    SCH.PARTY_FLAT SCHEDULE_PARTY_FLAT, SCH.PARTY_BUILDING SCHEDULE_PARTY_BUILDING, SCH.PARTY_STREET SCHEDULE_PARTY_STREET, SCH.PARTY_BLOCK SCHEDULE_PARTY_BLOCK,
    SCH.PARTY_CITY SCHEDULE_PARTY_CITY, SCH.PARTY_POBOX SCHEDULE_PARTY_POBOX, SCH.PARTY_COUNTRY SCHEDULE_PARTY_COUNTRY, SCH.PCODE SCHEDULE_PCODE, SCH.ACCOUNT_TITLE SCHEDULE_ACCOUNT_TITLE,
    SCH.ACCOUNT_CUST_NAME SCHEDULE_ACCOUNT_CUST_NAME, SCH.ACCOUNT_ADD1 SCHEDULE_ACCOUNT_ADD1, SCH.ACCOUNT_ADD2 SCHEDULE_ACCOUNT_ADD2, SCH.ACCOUNT_ADD3 SCHEDULE_ACCOUNT_ADD3,
    SCH.ACCOUNT_PHONE1 SCHEDULE_ACCOUNT_PHONE1, SCH.ACCOUNT_PHONE2 SCHEDULE_ACCOUNT_PHONE1, SCH.ACCOUNT_MOBILE SCHEDULE_ACCOUNT_MOBILE, SCH.ACCOUNT_EMAIL SCHEDULE_ACCOUNT_EMAIL,
    SCH.DEPT_ID SCHEDULE_DEPT_ID, SCH.DEPT_CD SCHEDULE_DEPT_CD, SCH.DEPT_NAME SCHEDULE_DEPT_NAME,
    SCH.CREATEUSERNAME SCHEDULE_CREATEUSERNAME, SCH.CREATEDT SCHEDULE_CREATEDT, SCH.EDITUSERNAME SCHEDULE_EDITUSERNAME, SCH.EDITDT SCHEDULE_EDITDT
    FROM (
                                    SELECT CONVERT(DATETIME,P.CALLTIME) CALLTIME, P.UNID, P.CALLER, P.CHANNEL, P.DSTCHANNEL,
                                    C.CLID, C.SRC, C.DST, C.DID, C.DCONTEXT, C.LASTAPP, C.LASTDATA, C.DURATION, C.BILLSEC, C.DISPOSITION, 'Current' RECORD_TYPE, CL.* 
                                    FROM (
                                                                    SELECT P.CALLTIME, P.UNID, P.CALLER, P.CHANNEL,
                                                                    --(SELECT MAX(DSTCHANNEL) FROM CDR C WHERE C.UNIQUEID=P.UNID AND C.DISPOSITION='ANSWERED') ANSWERED_CALL_DSTCHANNEL,
                                                                    --(SELECT MAX(DSTCHANNEL) FROM CDR C WHERE C.UNIQUEID=P.UNID AND C.DISPOSITION<>'ANSWERED') UNANSWERED_CALL_DSTCHANNEL
                                                                    ISNULL((SELECT MAX(DSTCHANNEL) FROM CDR C WHERE C.UNIQUEID=P.UNID AND C.DISPOSITION='ANSWERED'),(SELECT MAX(DSTCHANNEL) FROM CDR C WHERE C.UNIQUEID=P.UNID AND C.DISPOSITION<>'ANSWERED')) DSTCHANNEL
                                                                    FROM POPUP_TABLE P
                                                                    WHERE CONVERT(DATE,CALLTIME)='${req.params.date}'
                                                    ) P LEFT OUTER JOIN CDR C ON P.UNID=C.UNIQUEID AND P.DSTCHANNEL=C.DSTCHANNEL
                                                                    LEFT OUTER JOIN vwCaseLog CL ON P.UNID=CL.EXT_REFNO
                    UNION ALL
                                    SELECT CL.CREATEDT CALLTIME, NULL UNID, CL.PARTY_MOBILE CALLER, 'Manual' CHANNEL, NULL DSTCHANNEL,
                                    NULL CLID, NULL SRC, NULL DST, NULL DID, NULL DCONTEXT, NULL LASTAPP, NULL LASTDATA, NULL DURATION, NULL BILLSEC, NULL DISPOSITION, 'Current' RECORD_TYPE, CL.* 
                                    FROM vwCaseLog CL WHERE CL.COMP_CODE='01' AND ISNULL(CL.EXT_REFNO,'')='' AND CONVERT(DATE,CL.CREATEDT)='${req.params.date}'
         ) CL LEFT OUTER JOIN vwSchedule SCH ON CL.COMP_CODE=SCH.COMP_CODE AND CL.ENQNO=SCH.ENQNO AND ISNULL(SCH.ENQNO,'')<>''`;
    request.query(queryStr, function (err, recordset) {
        if (err) console.log(err)
        else {
            if (recordset.recordset.toString() === '') {
                res.send('Oops!!! Required data not found...');
            }
            else {
                // send records as a response
                res.send(recordset);
            }
        };
    });
};

exports.func2 = (req, res) => 
{
    // Validate request
    console.log(`Fetching RESPONSE`);
    // create Request object
    var request = new mssql.Request();
    // query to the database and get the records
    const queryStr = `SELECT TOP 1 * FROM VWCALLER WHERE CALLER LIKE '${req.params.number}';`;
    request.query(queryStr, function (err, recordset) {
        if (err) console.log(err)
        else {
            if (recordset.recordset.toString() === '') {
                res.send('Oops!!! Required data not found...');
            }
            else {
                // send records as a response
                res.send(recordset);
            }
        };
    });
};